{"version":3,"sources":["Components/Form.js","Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","temperature","city","country","humidity","description","error","API_KEY","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAUeA,EATF,SAACC,GACV,OACI,uBAAMC,SAAUD,EAAME,WAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,cAC3C,uBAAOF,KAAK,OAAOC,KAAM,UAAUC,YAAY,iBAC/C,qDCqCGC,EA1CD,SAACN,GACX,OACI,sBAAKO,UAAU,OAAf,UAEQP,EAAMQ,aACN,oBAAGD,UAAU,WAAb,0BACI,uBAAMA,UAAU,aAAhB,UAA8BP,EAAMQ,YAApC,eAIJR,EAAMS,MACN,oBAAGF,UAAU,WAAb,mBACI,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMS,UAIxCT,EAAMU,SACN,oBAAGH,UAAU,WAAb,sBACI,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMU,aAIxCV,EAAMW,UACN,oBAAGJ,UAAU,WAAb,uBACI,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMW,cAIxCX,EAAMY,aACN,oBAAGL,UAAU,WAAb,0BACI,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMY,iBAIxCZ,EAAMa,OACN,oBAAGN,UAAU,WAAb,oBACI,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMa,eCjClDC,EAAQ,mCAuDCC,E,4MArDbC,MAAM,CACJR,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAERX,W,uCAAY,WAAMe,GAAN,qBAAAC,EAAA,6DACVD,EAAEE,iBACIV,EAAKQ,EAAEG,OAAOC,SAASZ,KAAKa,MAC5BZ,EAAQO,EAAEG,OAAOC,SAASX,QAAQY,MAH9B,SAIQC,MAAM,oDAAD,OAAqDd,EAArD,YAA6DC,EAA7D,kBAA8EI,IAJ3F,cAIJU,EAJI,gBAKQA,EAAIC,OALZ,OAKJC,EALI,OAMPjB,GAAQC,EACT,EAAKiB,SAAS,CACZnB,YAAYkB,EAAKE,KAAKC,KAAK,IAC3BpB,KAAKiB,EAAKtB,KACVM,QAAQgB,EAAKI,IAAIpB,QACjBC,SAASe,EAAKE,KAAKjB,SACnBC,YAAYc,EAAKK,QAAQ,GAAGnB,YAC5BC,MAAM,KAIR,EAAKc,SAAS,CACZnB,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,oHAvBA,4C,kGA2BZ,WACE,OACE,qBAAKN,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAML,WAAY8B,KAAK9B,aACvB,cAAC,EAAD,CACAM,YAAawB,KAAKhB,MAAMR,YACxBC,KAAMuB,KAAKhB,MAAMP,KACjBC,QAASsB,KAAKhB,MAAMN,QACpBC,SAAUqB,KAAKhB,MAAML,SACrBC,YAAaoB,KAAKhB,MAAMJ,YACxBC,MAAOmB,KAAKhB,MAAMH,iB,GA/CVoB,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b691c1d3.chunk.js","sourcesContent":["import React from 'react'\r\nconst Form = (props)=>{\r\n    return(\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City.....\"/>\r\n            <input type=\"text\" name =\"country\" placeholder=\"Country.....\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form","import React from \"react\";\r\nconst Weather=(props)=>{\r\n    return(\r\n        <div className=\"info\">\r\n            {\r\n                props.temperature && \r\n                <p className=\"info-key\">Temperature : \r\n                    <span className=\"info-value\">{props.temperature} °C</span> \r\n                </p>\r\n            }\r\n            {\r\n                props.city && \r\n                <p className=\"info-key\">City : \r\n                    <span className=\"info-value\">{props.city}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.country && \r\n                <p className=\"info-key\">Country : \r\n                    <span className=\"info-value\">{props.country}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.humidity && \r\n                <p className=\"info-key\">Humidity : \r\n                    <span className=\"info-value\">{props.humidity}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.description && \r\n                <p className=\"info-key\">Description : \r\n                    <span className=\"info-value\">{props.description}</span>\r\n                </p>\r\n            }\r\n            {\r\n                props.error && \r\n                <p className=\"info-key\">Error : \r\n                    <span className=\"info-value\">{props.error}</span>\r\n                </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Weather;","import { Component } from \"react\";\nimport Form from \"./Components/Form\";\nimport Weather from \"./Components/Weather\";\n// http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nconst API_KEY=\"f259ddad1e0e5642c79c02178b3cda0d\";\nclass App extends Component{\n  state={\n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n  getWeather= async(e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const data= await api.json();\n    if(city && country){\n      this.setState({\n        temperature:data.main.temp-273 ,\n        city:data.name,\n        country:data.sys.country,\n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:''\n      })\n    }\n    else{\n      this.setState({\n        temperature:'',\n        city:'',\n        country:'',\n        humidity:'',\n        description:'',\n        error:'متدخل كسم الحاجه ياعم'\n      })\n    }\n  }\n  render(){\n    return(\n      <div className=\"wrapper\">\n        <div className=\"form-container\">  \n          <Form getWeather={this.getWeather}/>\n          <Weather \n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n          />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}